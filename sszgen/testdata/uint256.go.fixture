package faketypes

import (
	"encoding/binary"
	"errors"
	"fmt"
)

var (
	ErrBadBufferLength  = errors.New("bad ssz buffer length")
	ErrBadEncodedLength = errors.New("bad ssz encoded length")
)

type TestStruct struct {
	TwoFixSix *Int
}

// Int is represented as an array of 4 uint64, in little-endian order,
// so that Int[3] is the most significant, and Int[0] is the least significant
type Int [4]uint64

// NewInt returns a new initialized Int.
func NewInt(val uint64) *Int {
	z := &Int{}
	z.SetUint64(val)
	return z
}

// SetUint64 sets z to the value x
func (z *Int) SetUint64(x uint64) *Int {
	z[3], z[2], z[1], z[0] = 0, 0, 0, x
	return z
}

// MarshalSSZTo implements the fastssz.Marshaler interface and serializes the
// integer into an already pre-allocated buffer.
func (z *Int) MarshalSSZTo(dst []byte) ([]byte, error) {
	if len(dst) < 32 {
		return nil, fmt.Errorf("%w: have %d, want %d bytes", ErrBadBufferLength, len(dst), 32)
	}
	binary.LittleEndian.PutUint64(dst[0:8], z[0])
	binary.LittleEndian.PutUint64(dst[8:16], z[1])
	binary.LittleEndian.PutUint64(dst[16:24], z[2])
	binary.LittleEndian.PutUint64(dst[24:32], z[3])

	return dst[32:], nil
}

// MarshalSSZ implements the fastssz.Marshaler interface and returns the integer
// marshalled into a newly allocated byte slice.
func (z *Int) MarshalSSZ() ([]byte, error) {
	blob := make([]byte, 32)
	_, _ = z.MarshalSSZTo(blob) // ignore error, cannot fail, surely have 32 byte space in blob
	return blob, nil
}

// SizeSSZ implements the fastssz.Marshaler interface and returns the byte size
// of the 256 bit int.
func (*Int) SizeSSZ() int {
	return 32
}

// UnmarshalSSZ implements the fastssz.Unmarshaler interface and parses an encoded
// integer into the local struct.
func (z *Int) UnmarshalSSZ(buf []byte) error {
	if len(buf) != 32 {
		return fmt.Errorf("%w: have %d, want %d bytes", ErrBadEncodedLength, len(buf), 32)
	}
	z[0] = binary.LittleEndian.Uint64(buf[0:8])
	z[1] = binary.LittleEndian.Uint64(buf[8:16])
	z[2] = binary.LittleEndian.Uint64(buf[16:24])
	z[3] = binary.LittleEndian.Uint64(buf[24:32])

	return nil
}

// HashTreeRoot implements the fastssz.HashRoot interface's non-dependent part.
func (z *Int) HashTreeRoot() ([32]byte, error) {
	var hash [32]byte
	_, _ = z.MarshalSSZTo(hash[:]) // ignore error, cannot fail
	return hash, nil
}
